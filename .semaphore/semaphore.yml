version: v1.0
name: Java
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu2004
execution_time_limit:
  hours: 12
blocks:
  - name: 'Build on various JDKs, deploy and test on all downloadable containers'
    task:
      jobs:
        - name: Test Javadoc generation, build on JDK 8 and 21, deploy using JDK 11
          commands:
            - mvn javadoc:aggregate
            - mvn clean
            - export JAVA_HOME=/tmp/cargo/jdk1.8.0_202
            - mvn -version
            - (mvn clean install -e && echo "Build on Java 8 OK on first attempt" > $ORIGINAL_PWD/core/samples/java/containers.log) || (echo "First build on Java 8 failed, retrying" > $ORIGINAL_PWD/core/samples/java/containers.log ; mvn clean install -e)
            - export JAVA_HOME=/tmp/cargo/jdk-21
            - mvn -version
            - (mvn clean install -e && echo "Build on Java 21 OK on first attempt" > $ORIGINAL_PWD/core/samples/java/containers.log) || (echo "First build on Java 21 failed, retrying" > $ORIGINAL_PWD/core/samples/java/containers.log ; mvn clean install -e)
            - unset JAVA_HOME
            - mvn clean
            - sem-version java 11
            - mvn -version
            - (mvn clean deploy -e && echo "Deploy OK on first attempt" > $ORIGINAL_PWD/core/samples/java/containers.log) || (echo "First deploy failed, retrying" > $ORIGINAL_PWD/core/samples/java/containers.log ; mvn clean deploy -e)
            - find core/documentation/target -iname "*.log" -type f -exec artifact push job {} \;
        - name: All Java 6 containers
          commands:
            - 'find ~/.m2/semaphore-ci-binaries -type f -name jdk-6u45-linux-x64.bin -size -50M -print -exec rm {} +'
            - cd ~/.m2/semaphore-ci-binaries
            - 'wget -N --continue https://repo.huaweicloud.com/java/jdk/6u45-b06/jdk-6u45-linux-x64.bin ; RM=0'
            - cp jdk-6u45-linux-x64.bin /tmp/cargo
            - cd /tmp/cargo
            - chmod +x jdk-6u45-linux-x64.bin
            - ./jdk-6u45-linux-x64.bin < <(echo y)
            - cd $ORIGINAL_PWD/core/samples/java
            - 'echo "Build status for containers:" >> containers.log'
             # We need to use Java 8 as the runtime when creating the configurations,
             # else some containers (such as JOnAS) have awkward failures such as java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException
            - export JAVA_HOME=/tmp/cargo/jdk1.8.0_202
            - mvn -version
            - mvn clean install -o -e -Pgeronimo1x -Dcargo.java.home.1_4=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for geronimo1x is $?" >> containers.log ; RM=0
            - zip -jr geronimo1x target -i "*.log" ; artifact push job geronimo1x.zip
            - mvn clean install -o -e -Pgeronimo3x -Dcargo.java.home.1_6=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for geronimo3x is $?" >> containers.log ; RM=0
            - zip -jr geronimo3x target -i "*.log" ; artifact push job geronimo3x.zip
            - mvn clean install -o -e -Pglassfish3x -Dcargo.java.home.1_6=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for glassfish3x is $?" >> containers.log ; RM=0
            - zip -jr glassfish3x target -i "*.log" ; artifact push job glassfish3x.zip
            - mvn clean install -o -e -Pjboss3x -Dcargo.java.home.1_4=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jboss3x is $?" >> containers.log ; RM=0
            - zip -jr jboss3x target -i "*.log" ; artifact push job jboss3x.zip
            - mvn clean install -o -e -Pjboss4x -Dcargo.java.home.1_4=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jboss4x is $?" >> containers.log ; RM=0
            - zip -jr jboss4x target -i "*.log" ; artifact push job jboss4x.zip
            - mvn clean install -o -e -Pjboss42x -Dcargo.java.home.1_5=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jboss42x is $?" >> containers.log ; RM=0
            - zip -jr jboss42x target -i "*.log" ; artifact push job jboss42x.zip
            - mvn clean install -o -e -Pjboss5x -Dcargo.java.home.1_5=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jboss5x is $?" >> containers.log ; RM=0
            - zip -jr jboss5x target -i "*.log" ; artifact push job jboss5x.zip
            - mvn clean install -o -e -Pjboss51x -Dcargo.java.home.1_5=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jboss51x is $?" >> containers.log ; RM=0
            - zip -jr jboss51x target -i "*.log" ; artifact push job jboss51x.zip
            - mvn clean install -o -e -Pjboss6x -Dcargo.java.home.1_6=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jboss6x is $?" >> containers.log ; RM=0
            - zip -jr jboss6x target -i "*.log" ; artifact push job jboss6x.zip
            - mvn clean install -o -e -Pjboss61x -Dcargo.java.home.1_6=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jboss61x is $?" >> containers.log ; RM=0
            - zip -jr jboss61x target -i "*.log" ; artifact push job jboss61x.zip
            - mvn clean install -o -e -Pjboss7x -Dcargo.java.home.1_6=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jboss7x is $?" >> containers.log ; RM=0
            - zip -jr jboss7x target -i "*.log" ; artifact push job jboss7x.zip
            - mvn clean install -o -e -Pjboss71x -Dcargo.java.home.1_6=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jboss71x is $?" >> containers.log ; RM=0
            - zip -jr jboss71x target -i "*.log" ; artifact push job jboss71x.zip
            - mvn clean install -o -e -Pjetty5x -Dcargo.java.home.1_4=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jetty5x is $?" >> containers.log ; RM=0
            - zip -jr jetty5x target -i "*.log" ; artifact push job jetty5x.zip
            - mvn clean install -o -e -Pjetty6x -Dcargo.java.home.1_5=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jetty6x is $?" >> containers.log ; RM=0
            - zip -jr jetty6x target -i "*.log" ; artifact push job jetty6x.zip
            - mvn clean install -o -e -Pjetty7x -Dcargo.java.home.1_5=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jetty7x is $?" >> containers.log ; RM=0
            - zip -jr jetty7x target -i "*.log" ; artifact push job jetty7x.zip
            - mvn clean install -o -e -Pjetty8x -Dcargo.java.home.1_6=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jetty8x is $?" >> containers.log ; RM=0
            - zip -jr jetty8x target -i "*.log" ; artifact push job jetty8x.zip
            - mvn clean install -o -e -Pjo1x -Dcargo.java.home.1_4=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jo1x is $?" >> containers.log ; RM=0
            - zip -jr jo1x target -i "*.log" ; artifact push job jo1x.zip
            - mvn clean install -o -e -Pjonas4x -Dcargo.java.home.1_4=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jonas4x is $?" >> containers.log ; RM=0
            - zip -jr jonas4x target -i "*.log" ; artifact push job jonas4x.zip
            - mvn clean install -o -e -Pjonas5x -Dcargo.java.home.1_6=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for jonas5x is $?" >> containers.log ; RM=0
            - zip -jr jonas5x target -i "*.log" ; artifact push job jonas5x.zip
            - mvn clean install -o -e -Presin3x -Dcargo.java.home.1_5=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for resin3x is $?" >> containers.log ; RM=0
            - zip -jr resin3x target -i "*.log" ; artifact push job resin3x.zip
            - mvn clean install -o -e -Presin31x -Dcargo.java.home.1_5=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for resin31x is $?" >> containers.log ; RM=0
            - zip -jr resin31x target -i "*.log" ; artifact push job resin31x.zip
            - mvn clean install -o -e -Ptomcat4x -Dcargo.java.home.1_4=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for tomcat4x is $?" >> containers.log ; RM=0
            - zip -jr tomcat4x target -i "*.log" ; artifact push job tomcat4x.zip
            - mvn clean install -o -e -Ptomcat5x -Dcargo.java.home.1_4=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for tomcat5x is $?" >> containers.log ; RM=0
            - zip -jr tomcat5x target -i "*.log" ; artifact push job tomcat5x.zip
            - mvn clean install -o -e -Ptomcat6x -Dcargo.java.home.1_5=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for tomcat6x is $?" >> containers.log ; RM=0
            - zip -jr tomcat6x target -i "*.log" ; artifact push job tomcat6x.zip
            - mvn clean install -o -e -Ptomcat7x -Dcargo.java.home.1_6=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for tomcat7x is $?" >> containers.log ; RM=0
            - zip -jr tomcat7x target -i "*.log" ; artifact push job tomcat7x.zip
            - mvn clean install -o -e -Ptomee1x -Dcargo.java.home.1_6=/tmp/cargo/jdk1.6.0_45 ; echo "  Status for tomee1x is $?" >> containers.log ; RM=0
            - zip -jr tomee1x target -i "*.log" ; artifact push job tomee1x.zip
            - unset JAVA_HOME
        - name: All Java 8 containers until WildFly 20.x
          commands:
            - cd $ORIGINAL_PWD/core/samples/java
            - 'echo "Build status for containers:" >> containers.log'
            - export JAVA_HOME=/tmp/cargo/jdk1.8.0_202
            - mvn -version
            - mvn clean install -o -e -Pglassfish4x ; echo "  Status for glassfish4x is $?" >> containers.log ; RM=0
            - zip -jr glassfish4x target -i "*.log" ; artifact push job glassfish4x.zip
            - mvn clean install -o -e -Pglassfish5x ; echo "  Status for glassfish5x is $?" >> containers.log ; RM=0
            - zip -jr glassfish5x target -i "*.log" ; artifact push job glassfish5x.zip
            - mvn clean install -o -e -Pjetty9x ; echo "  Status for jetty9x is $?" >> containers.log ; RM=0
            - zip -jr jetty9x target -i "*.log" ; artifact push job jetty9x.zip
            - mvn clean install -o -e -Pliberty ; echo "  Status for liberty is $?" >> containers.log ; RM=0
            - zip -jr liberty target -i "*.log" ; artifact push job liberty.zip
            - mvn clean install -o -e -Presin4x ; echo "  Status for resin4x is $?" >> containers.log ; RM=0
            - zip -jr resin4x target -i "*.log" ; artifact push job resin4x.zip
            - mvn clean install -o -e -Ptomcat8x ; echo "  Status for tomcat8x is $?" >> containers.log ; RM=0
            - zip -jr tomcat8x target -i "*.log" ; artifact push job tomcat8x.zip
            - mvn clean install -o -e -Ptomcat9x ; echo "  Status for tomcat9x is $?" >> containers.log ; RM=0
            - zip -jr tomcat9x target -i "*.log" ; artifact push job tomcat9x.zip
            - mvn clean install -o -e -Ptomee7x ; echo "  Status for tomee7x is $?" >> containers.log ; RM=0
            - zip -jr tomee7x target -i "*.log" ; artifact push job tomee7x.zip
            - mvn clean install -o -e -Ptomee8x ; echo "  Status for tomee8x is $?" >> containers.log ; RM=0
            - zip -jr tomee8x target -i "*.log" ; artifact push job tomee8x.zip
            - mvn clean install -o -e -Pwildfly8x ; echo "  Status for wildfly8x is $?" >> containers.log ; RM=0
            - zip -jr wildfly8x target -i "*.log" ; artifact push job wildfly8x.zip
            - mvn clean install -o -e -Pwildfly9x ; echo "  Status for wildfly9x is $?" >> containers.log ; RM=0
            - zip -jr wildfly9x target -i "*.log" ; artifact push job wildfly9x.zip
            - mvn clean install -o -e -Pwildfly10x ; echo "  Status for wildfly10x is $?" >> containers.log ; RM=0
            - zip -jr wildfly10x target -i "*.log" ; artifact push job wildfly10x.zip
            - mvn clean install -o -e -Pwildfly11x ; echo "  Status for wildfly11x is $?" >> containers.log ; RM=0
            - zip -jr wildfly11x target -i "*.log" ; artifact push job wildfly11x.zip
            - mvn clean install -o -e -Pwildfly12x ; echo "  Status for wildfly12x is $?" >> containers.log ; RM=0
            - zip -jr wildfly12x target -i "*.log" ; artifact push job wildfly12x.zip
            - mvn clean install -o -e -Pwildfly13x ; echo "  Status for wildfly13x is $?" >> containers.log ; RM=0
            - zip -jr wildfly13x target -i "*.log" ; artifact push job wildfly13x.zip
            - mvn clean install -o -e -Pwildfly14x ; echo "  Status for wildfly14x is $?" >> containers.log ; RM=0
            - zip -jr wildfly14x target -i "*.log" ; artifact push job wildfly14x.zip
            - mvn clean install -o -e -Pwildfly15x ; echo "  Status for wildfly15x is $?" >> containers.log ; RM=0
            - zip -jr wildfly15x target -i "*.log" ; artifact push job wildfly15x.zip
            - mvn clean install -o -e -Pwildfly16x ; echo "  Status for wildfly16x is $?" >> containers.log ; RM=0
            - zip -jr wildfly16x target -i "*.log" ; artifact push job wildfly16x.zip
            - mvn clean install -o -e -Pwildfly17x ; echo "  Status for wildfly17x is $?" >> containers.log ; RM=0
            - zip -jr wildfly17x target -i "*.log" ; artifact push job wildfly17x.zip
            - mvn clean install -o -e -Pwildfly18x ; echo "  Status for wildfly18x is $?" >> containers.log ; RM=0
            - zip -jr wildfly18x target -i "*.log" ; artifact push job wildfly18x.zip
            - mvn clean install -o -e -Pwildfly19x ; echo "  Status for wildfly19x is $?" >> containers.log ; RM=0
            - zip -jr wildfly19x target -i "*.log" ; artifact push job wildfly19x.zip
            - mvn clean install -o -e -Pwildfly20x ; echo "  Status for wildfly20x is $?" >> containers.log ; RM=0
            - zip -jr wildfly20x target -i "*.log" ; artifact push job wildfly20x.zip
            - unset JAVA_HOME
        - name: All Java 8 containers from WildFly 21.x, all Java 11, 17 and 21 containers
          commands:
            - cd $ORIGINAL_PWD/core/samples/java
            - 'echo "Build status for containers:" >> containers.log'
            - export JAVA_HOME=/tmp/cargo/jdk1.8.0_202
            - mvn -version
            - mvn clean install -o -e -Pwildfly21x ; echo "  Status for wildfly21x is $?" >> containers.log ; RM=0
            - zip -jr wildfly21x target -i "*.log" ; artifact push job wildfly21x.zip
            - mvn clean install -o -e -Pwildfly22x ; echo "  Status for wildfly22x is $?" >> containers.log ; RM=0
            - zip -jr wildfly22x target -i "*.log" ; artifact push job wildfly22x.zip
            - mvn clean install -o -e -Pwildfly23x ; echo "  Status for wildfly23x is $?" >> containers.log ; RM=0
            - zip -jr wildfly23x target -i "*.log" ; artifact push job wildfly23x.zip
            - mvn clean install -o -e -Pwildfly24x ; echo "  Status for wildfly24x is $?" >> containers.log ; RM=0
            - zip -jr wildfly24x target -i "*.log" ; artifact push job wildfly24x.zip
            - mvn clean install -o -e -Pwildfly25x ; echo "  Status for wildfly25x is $?" >> containers.log ; RM=0
            - zip -jr wildfly25x target -i "*.log" ; artifact push job wildfly25x.zip
            - mvn clean install -o -e -Pwildfly26x ; echo "  Status for wildfly26x is $?" >> containers.log ; RM=0
            - zip -jr wildfly26x target -i "*.log" ; artifact push job wildfly26x.zip
            - unset JAVA_HOME
            - mvn -version
            - mvn clean install -o -e -Pglassfish6x ; echo "  Status for glassfish6x is $?" >> containers.log ; RM=0
            - zip -jr glassfish6x target -i "*.log" ; artifact push job glassfish6x.zip
            - mvn clean install -o -e -Pglassfish7x ; echo "  Status for glassfish7x is $?" >> containers.log ; RM=0
            - zip -jr glassfish7x target -i "*.log" ; artifact push job glassfish7x.zip
            - mvn clean install -o -e -Pjetty10x ; echo "  Status for jetty10x is $?" >> containers.log ; RM=0
            - zip -jr jetty10x target -i "*.log" ; artifact push job jetty10x.zip
            - mvn clean install -o -e -Pjetty11x ; echo "  Status for jetty11x is $?" >> containers.log ; RM=0
            - zip -jr jetty11x target -i "*.log" ; artifact push job jetty11x.zip
            - mvn clean install -o -e -Ppayara ; echo "  Status for payara is $?" >> containers.log ; RM=0
            - zip -jr payara target -i "*.log" ; artifact push job payara.zip
            - mvn clean install -o -e -Ptomcat10x ; echo "  Status for tomcat10x is $?" >> containers.log ; RM=0
            - zip -jr tomcat10x target -i "*.log" ; artifact push job tomcat10x.zip
            - mvn clean install -o -e -Ptomee9x ; echo "  Status for tomee9x is $?" >> containers.log ; RM=0
            - zip -jr tomee9x target -i "*.log" ; artifact push job tomee9x.zip
            - mvn clean install -o -e -Pwildfly27x ; echo "  Status for wildfly27x is $?" >> containers.log ; RM=0
            - zip -jr wildfly27x target -i "*.log" ; artifact push job wildfly27x.zip
            - mvn clean install -o -e -Pwildfly28x ; echo "  Status for wildfly28x is $?" >> containers.log ; RM=0
            - zip -jr wildfly28x target -i "*.log" ; artifact push job wildfly28x.zip
            - mvn clean install -o -e -Pwildfly29x ; echo "  Status for wildfly29x is $?" >> containers.log ; RM=0
            - zip -jr wildfly29x target -i "*.log" ; artifact push job wildfly29x.zip
            - mvn clean install -o -e -Pwildfly30x ; echo "  Status for wildfly30x is $?" >> containers.log ; RM=0
            - zip -jr wildfly30x target -i "*.log" ; artifact push job wildfly30x.zip
            - sem-version java 17
            - mvn -version
            - mvn clean install -o -e -Pjetty12x ; echo "  Status for jetty12x is $?" >> containers.log ; RM=0
            - zip -jr jetty12x target -i "*.log" ; artifact push job jetty12x.zip
            - export JAVA_HOME=/tmp/cargo/jdk-21
            - mvn -version
            - mvn clean install -o -e -Ptomcat11x ; echo "  Status for tomcat11x is $?" >> containers.log ; RM=0
            - zip -jr tomcat11x target -i "*.log" ; artifact push job tomcat11x.zip
            - unset JAVA_HOME
      prologue:
        commands:
          - echo 'echo "127.0.0.1 codehaus-cargo-ci" >> /etc/hosts' | sudo bash
          - sudo hostname codehaus-cargo-ci
          - CARGO_BRANCH_ID="$(echo -n "$SEMAPHORE_JOB_NAME" | md5sum )"
          - pushd ~/
          - cache restore "cargo-$CARGO_BRANCH_ID"
          - popd
          - checkout
          - export ORIGINAL_PWD=$PWD
          - mkdir -p /tmp/cargo
          - mkdir -p ~/.m2
          - mkdir -p ~/.m2/cargo-installs
          - mkdir -p ~/.m2/semaphore-ci-binaries
          - 'find ~/.m2/semaphore-ci-binaries -type f -name apache-maven-3.5.4-bin.tar.gz -size -5M -print -exec rm {} +'
          - 'find ~/.m2/semaphore-ci-binaries -type f -name jdk-8u202-linux-i586.tar.gz -size -150M -print -exec rm {} +'
          - 'find ~/.m2/semaphore-ci-binaries -type f -name openjdk-21_linux-x64_bin.tar.gz -size -150M -print -exec rm {} +'
          - ls -al ~/.m2/cargo-installs
          - ln -s ~/.m2/cargo-installs $ORIGINAL_PWD/core/samples/java/installs
          - ls -al ~/.m2/semaphore-ci-binaries
          - cd ~/.m2/semaphore-ci-binaries
          - 'wget -N --continue https://archive.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz ; RM=0'
          - tar -xvzf apache-maven-3.5.4-bin.tar.gz -C /tmp/cargo
          - 'wget -N --continue https://repo.huaweicloud.com/java/jdk/8u202-b08/jdk-8u202-linux-i586.tar.gz ; RM=0'
          - tar -xvzf jdk-8u202-linux-i586.tar.gz -C /tmp/cargo
          - 'wget -N --continue https://download.java.net/java/GA/jdk21/fd2272bbf8e04c3dbaee13770090416c/35/GPL/openjdk-21_linux-x64_bin.tar.gz ; RM=0'
          - tar -xvzf openjdk-21_linux-x64_bin.tar.gz -C /tmp/cargo
          - cd $ORIGINAL_PWD
          - export MAVEN_HOME=/tmp/cargo/apache-maven-3.5.4
          - export MAVEN_OPTS="-Xmx768m"
          - 'export PATH=$MAVEN_HOME/bin:$PATH'
          - sem-version java 11
          - mvn -version
          - (mvn clean install -e && echo "Build on Java 11 OK on first attempt" > $ORIGINAL_PWD/core/samples/java/containers.log) || (echo "First build on Java 11 failed, retrying" > $ORIGINAL_PWD/core/samples/java/containers.log ; mvn clean install -e)
          - find . -iname "TEST-*.xml" -type f | xargs test-results publish
      epilogue:
        always:
          commands:
            - cd $ORIGINAL_PWD
            - mvn clean
            - cat $ORIGINAL_PWD/core/samples/java/containers.log ; RM=0
            - rm -rf ~/.m2/repository/org/codehaus/cargo
            - rm -rf ~/.cargo
            - ls -al ~/.m2/cargo-installs
            - ls -al ~/.m2/semaphore-ci-binaries
            - pushd ~/
            - cache delete "cargo-$CARGO_BRANCH_ID"
            - cache store "cargo-$CARGO_BRANCH_ID" .m2
            - cache list
            - popd
      secrets:
        - name: Snapshot deployment configuration
      env_vars:
        - name: SEMAPHORE_AGENT_UPLOAD_JOB_LOGS
          value: when-trimmed
